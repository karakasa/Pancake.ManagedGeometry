using NUnit.Framework;
using Pancake.ManagedGeometry.Algo;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Pancake.ManagedGeometry.Algo.PointInsidePolygon;

namespace Pancake.ManagedGeometry.Tests.PolygonTest;
public class Bug20250627
{
    [Test]
    public void Test1()
    {
        var ply = new Polygon((Coord2d[])
            [
            (-16.442801037304918, -208.85624499517755),
            (-16.44280103730491, -169.32361919126521),
            (-15.294506059900785, -169.32361919126521),
            (-15.294506059900769, -159.6451406851387),
            (-3.8115671455504376, -159.64514068513876),
            (-3.8115671455505442, -100.26193999342856),
            (55.899718351794277, -100.26193999342874),
            (55.899718351794256, -115.68188746660064),
            (55.897414632400817, -115.68188746660064),
            (55.897414632400832, -125.52440715163999),
            (55.899718351794242, -125.52440715163999),
            (55.899718351794228, -138.64776673169249),
            (55.89741463240086, -138.64776673169249),
            (55.897414632400874, -142.58477460570825),
            (55.899718351794213, -142.58477460570825),
            (55.899718351794213, -148.81837040617791),
            (67.382658280290173, -148.81837040617793),
            (67.382658280290173, -169.32419680771983),
            (68.530951947583418, -169.32419680771983),
            (68.530951947583247, -208.85637476809529),
            (67.761279220715537, -208.74820565304427),
            (66.986980488359308, -208.6806916766644),
            (66.210201701921022, -208.65401995241271),
            (65.433095686220781, -208.66826440036911),
            (64.657816172987168, -208.72338554236856),
            (63.886511831838504, -208.819230611414),
            (63.12132031529373, -208.95553397506654),
            (62.364362334316759, -209.13191787163976),
            (61.617735780814087, -209.34789345715768),
            (60.883509913374887, -209.60286216017482),
            (60.163719622367651, -209.89611734070331),
            (59.460359790287612, -210.22684624864974),
            (58.7753797629851, -210.59413227633351),
            (58.1106779470976, -210.99695749884441),
            (57.4680965486588, -211.43420549519831),
            (56.849416467466192, -211.90466444247278),
            (56.256352361357706, -212.40703047434678),
            (55.690547894076253, -212.9399112947367),
            (55.034346131039293, -213.08276405176116),
            (54.29735072303238, -212.85003220611171),
            (53.549186049926227, -212.65618699642425),
            (52.791902394500674, -212.50175963930081),
            (52.027575029344682, -212.38717333001165),
            (51.25829852974524, -212.31274208276403),
            (50.48618103367879, -212.27866987017254),
            (49.713338464635228, -212.28505006428915),
            (48.941888733106389, -212.33186518072492),
            (48.173945932629252, -212.41898692656454),
            (47.411614546289243, -212.54617655194227),
            (46.656983679560163, -212.71308550431607),
            (45.912121335285164, -212.91925638364671),
            (45.179068746487765, -213.1641241958643),
            (44.459834782543247, -213.44701790118748),
            (43.756390444039994, -213.76716225305165),
            (43.070663461417048, -214.12367992260766),
            (42.4045330121799, -214.51559390296802),
            (41.759824571171485, -214.9418301866128),
            (41.138304908010973, -215.40122070861742),
            (40.456757416337965, -215.47654143867317),
            (39.749738780365576, -215.16391654255017),
            (39.027325500079264, -214.88872800762491),
            (38.291498227769218, -214.65173032279847),
            (37.544274393086567, -214.45357326849432),
            (36.787702671823645, -214.2948001351449),
            (36.023857369026111, -214.17584623364317),
            (35.25483273183692, -214.09703770184385),
            (34.482737207664712, -214.05859061038578),
            (33.709687663419153, -214.06061037028761),
            (32.937803581662294, -214.10309144394057),
            (32.169201249588667, -214.18591736029123),
            (31.405987956766097, -214.30886103417183),
            (30.650256217545458, -214.47158538890363),
            (29.904078033979921, -214.6736442804654),
            (29.169499214983077, -214.91448372069382),
            (28.448533767301207, -215.19344339616185),
            (27.743158373678135, -215.50975847857086),
            (27.055306973351787, -215.86256172169288),
            (26.386865459741475, -216.25088583911375),
            (25.70055785355715, -216.25088583911372),
            (25.032116339946924, -215.86256172169291),
            (24.344264939620576, -215.50975847857089),
            (23.6388895459975, -215.19344339616188),
            (22.91792409831563, -214.91448372069385),
            (22.183345279318786, -214.67364428046545),
            (21.437167095753246, -214.47158538890366),
            (20.68143535653261, -214.30886103417185),
            (19.918222063710036, -214.18591736029126),
            (19.149619731636413, -214.1030914439406),
            (18.377735649879561, -214.06061037028763),
            (17.604686105633995, -214.05859061038581),
            (16.832590581461787, -214.09703770184387),
            (16.063565944272597, -214.1758462336432),
            (15.299720641475066, -214.29480013514492),
            (14.543148920212143, -214.45357326849438),
            (13.79592508552949, -214.6517303227985),
            (13.060097813219443, -214.88872800762493),
            (12.337684532933132, -215.16391654255017),
            (11.630665896960657, -215.47654143867325),
            (10.949118405287692, -215.40122070861736),
            (10.327598742127256, -214.9418301866128),
            (9.6828903011188387, -214.51559390296802),
            (9.0167598518816714, -214.12367992260764),
            (8.33103286925872, -213.76716225305162),
            (7.6275885307554656, -213.44701790118745),
            (6.9083545668109405, -213.16412419586428),
            (6.17530197801353, -212.91925638364668),
            (5.4304396337385263, -212.71308550431604),
            (4.6758087670094337, -212.54617655194224),
            (3.913477380669415, -212.41898692656451),
            (3.14553458019227, -212.33186518072489),
            (2.3740848486634247, -212.28505006428912),
            (1.6012422796198571, -212.27866987017254),
            (0.82912478355339569, -212.31274208276403),
            (0.059848283953940928, -212.38717333001165),
            (-0.70447908120205671, -212.50175963930081),
            (-1.4617627366276125, -212.65618699642425),
            (-2.2099274097337753, -212.85003220611171),
            (-2.9469228177407736, -213.08276405176119),
            (-3.603124590645189, -212.9399112925885),
            (-4.1688982569796007, -212.40705730859284),
            (-4.7619288030734737, -211.90471481469322),
            (-5.3805728308348808, -211.43427589549879),
            (-6.0231159624439092, -210.99704422487125),
            (-6.6877775912127957, -210.59423145320187),
            (-7.37271581597872, -210.2269538497026),
            (-8.07603254535493, -209.89622920901607),
            (-8.7957787576955226, -209.60297403071729),
            (-9.5299599021973922, -209.34800097952245),
            (-10.276541426171983, -209.13201663324369),
            (-11.033454413169734, -208.95561952473048),
            (-11.798601316332858, -208.81929848322346),
            (-12.569861771088355, -208.72343127971766),
            (-13.345098471073154, -208.66828358008874),
            (-14.12216309100809, -208.65400820888334),
            (-14.898902240107383, -208.68064472581375),
            (-15.673163429525557, -208.74811931613067)
            ]
            );

        Coord2d pt = (20.466647485641374, -125.52440793780593);
        var tol = 0.003280839895;

        PointInsidePolygon.ContainsRaycastingMethod(ply, pt, tol);
        var p = PointInsidePolygon.l;
        PointInsidePolygon.ContainsRaycastingMethod(ply, pt);
        p = PointInsidePolygon.l;

        Assert.Multiple(() =>
        {
            Assert.That(PointInsidePolygon.ContainsRaycastingMethod(ply, pt), Is.EqualTo(PointContainment.Inside));
            // Assert.That(PointInsidePolygon.ContainsWindingNumberMethod(ply, pt), Is.True);

            Assert.That(PointInsidePolygon.ContainsRaycastingMethod(ply, pt, tol), Is.EqualTo(PointContainment.Inside));
            // Assert.That(PointInsidePolygon.ContainsWindingNumberMethod(ply, pt, tol), Is.True);
        });
    }

    [Test]
    public void Test2()
    {
        var ply = new Polygon((Coord2d[])
            [
            (-3.8121436689675932, -115.35322757127565),
            (20.466647485641388, -115.35322757127565),
            (20.466647485641388, -131.42991762190559),
            (18.828530527378085, -131.42991762190559),
            (18.828530527378085, -134.71075719554881),
            (20.466647485641388, -134.71075719554881),
            (20.466647485641388, -137.33543080680218),
            (20.465496218360531, -137.33543080680218),
            (20.465496218360531, -135.36692517455143),
            (18.828530527378078, -135.36692517455143),
            (18.828530527378078, -137.33543080680218),
            (-3.8121436689675932, -137.33543080680215),
            (-3.8121436689675932, -125.52440717400368),
            (-3.8115677374557038, -125.52440717400368),
            (-3.8115677374557038, -115.68131156077698),
            (-3.8121436689675932, -115.68131156077696)
            ]
            );

        Coord2d pt = (-3.8115677374557571, -159.64514209289115);
        var tol = 0.003280839895;

        Assert.Multiple(() =>
        {
            Assert.That(PointInsidePolygon.ContainsRaycastingMethod(ply, pt), Is.EqualTo(PointContainment.Outside));
            Assert.That(PointInsidePolygon.ContainsWindingNumberMethod(ply, pt), Is.False);

            Assert.That(PointInsidePolygon.ContainsRaycastingMethod(ply, pt, tol), Is.EqualTo(PointContainment.Outside));
            Assert.That(PointInsidePolygon.ContainsWindingNumberMethod(ply, pt, tol), Is.False);
        });
    }
}
