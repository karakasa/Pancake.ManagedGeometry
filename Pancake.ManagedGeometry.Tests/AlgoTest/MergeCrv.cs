using NUnit.Framework;
using NUnit.Framework.Constraints;
using Pancake.ManagedGeometry.Algo;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pancake.ManagedGeometry.Tests.AlgoTest;

public class MergeCrv
{
    [Test]
    public void MergeIntoMultiple()
    {
        var array = new Line3d[]
        {
            new Line3d((-15.4484389693458, 0.539683457444395, 0.0), (10.6292918190685, 16.1592799435705, 0.0)),
            new Line3d((10.6292918190685, 16.1592799435705, 0.0), (35.2856986637922, -1.81064368902467, 0.0)),
            new Line3d((35.2856986637922, -1.81064368902467, 0.0), (15.4352016277859, -27.8252424362119, 0.0)),
            new Line3d((15.4352016277859, -27.8252424362119, 0.0), (-11.6241601212964, -33.3624863462557, 0.0)),
            new Line3d((-11.6241601212964, -33.3624863462557, 0.0), (-13.5047335247076, -2.54197779035121, 0.0)),
            new Line3d((-13.5047335247076, -2.54197779035121, 0.0), (-6.08691621125257, -3.06435929129875, 0.0)),
            new Line3d((-6.08691621125257, -3.06435929129875, 0.0), (-15.4484389693458, 0.539683457444395, 0.0)),
            new Line3d((57.6165481740306, 53.5884683058195, 0.0), (60.912534303127, 34.4118217365313, 0.0)),
            new Line3d((60.912534303127, 34.4118217365313, 0.0), (153.799416123117, 31.41547071008, 0.0)),
            new Line3d((153.799416123117, 31.41547071008, 0.0), (147.806714070214, 72.4654797724627, 0.0)),
            new Line3d((147.806714070214, 72.4654797724627, 0.0), (104.958894391961, 69.4691287460114, 0.0)),
            new Line3d((104.958894391961, 69.4691287460114, 0.0), (87.2804233358983, 48.1950364582072, 0.0)),
            new Line3d((87.2804233358983, 48.1950364582072, 0.0), (61.8114396110624, 67.3716830274955, 0.0)),
            new Line3d((61.8114396110624, 67.3716830274955, 0.0), (57.6165481740306, 53.5884683058195, 0.0)),
            new Line3d((14.7687284957771, 24.523863349242, 0.0), (5.18040521113294, 67.0720479248503, 0.0)),
            new Line3d((5.18040521113294, 67.0720479248503, 0.0), (-31.9743475168631, 52.0902927925939, 0.0)),
            new Line3d((-31.9743475168631, 52.0902927925939, 0.0), (-17.891497692542, 31.41547071008, 0.0)),
            new Line3d((-17.891497692542, 31.41547071008, 0.0), (37.840631399452, 51.7906576899487, 0.0)),
            new Line3d((37.840631399452, 51.7906576899487, 0.0), (41.7358877338387, 26.6213090677579, 0.0)),
            new Line3d((41.7358877338387, 26.6213090677579, 0.0), (14.7687284957771, 24.523863349242, 0.0)),
        };

        var crvs = array.Select(l => new CurveRepresentation(l.From, l.To)).ToArray();
        var result = CurveOperation.MergeCurves(crvs).ToArray();

        Utility.AssertEquals(result.Length, 3);
        var resultLength = result.Select(list => list.Sum(l => array[l.Index].Length))
            .OrderBy(s => s).ToArray();

        Utility.AssertEquals(169.596174, resultLength[0], 1e-4);
        Utility.AssertEquals(220.549678, resultLength[1], 1e-4);
        Utility.AssertEquals(270.78, resultLength[2], 1e-4);
    }

    [Test]
    public void Bug20240124()
    {
        Coord[] coords =
            [(-662.931559530072,-283.992572530034,-33.4645669291339),(-625.87202835129,-289.531156574241,-33.4645669291339),
            (-625.87202835129,-289.531156574241,-33.4645669291339),(-618.784608651599,-242.108124037066,-33.4645669291339),
            (-618.784608651599,-242.108124037066,-33.4645669291339),(-293.027975592997,-242.108124037066,-33.4645669291339),
            (-293.027975592997,-242.108124037066,-33.4645669291339),(-298.01856183681,-275.500916315206,-33.4645669291339),
            (-298.01856183681,-275.500916315206,-33.4645669291339),(-137.59392892719,-299.476538344252,-33.4645669291339),
            (-137.59392892719,-299.476538344252,-33.4645669291339),(11.7043702584598,-385.673951568662,-33.4645669291339),
            (11.7043702584598,-385.673951568662,-33.4645669291339),(11.7043702584598,-676.736350917838,-33.4645669291339),
            (11.7043702584598,-676.736350917838,-33.4645669291339),(-22.5681300301331,-825.186859068114,-33.4645669291339),
            (-22.5681300301331,-825.186859068114,-33.4645669291339),(-48.736504316781,-901.185336322522,-33.4645669291339),
            (-48.7365043167808,-901.185336322522,-33.4645669291339),(-48.7365043167808,-900.900774919028,-33.4645669291339),
            (-48.7365043167807,-900.900774919028,-33.4645669291339),(-55.0607216056836,-900.900774919028,-33.4645669291339),
            (-55.0607216056837,-900.900774919028,-33.4645669291339),(-55.0607216056837,-886.629121412786,-33.4645669291339),
            (-55.0607216056835,-886.629121412786,-33.4645669291339),(-56.0449735741876,-886.629121412786,-33.4645669291339),
            (-56.0449735741877,-886.629121412786,-33.4645669291339),(-56.0449735741877,-901.885026924598,-33.4645669291339),
            (-56.0449735741876,-901.885026924597,-33.4645669291339),(-48.9774270990717,-901.885026887532,-33.4645669291339),
            (-48.9774270990719,-901.885026887532,-33.4645669291339),(-80.1480326159658,-992.411038493476,-33.4645669291339),
            (-80.1480326159658,-992.411038493476,-33.4645669291339),(-221.108017970434,-1236.56089496162,-33.4645669291339),
            (-221.108017970434,-1236.56089496162,-33.4645669291339),(-393.016468383391,-1137.30950483973,-33.4645669291339),
            (-393.016468383391,-1137.30950483973,-33.4645669291339),(-459.752322654891,-1043.74928776337,-33.4645669291339),
            (-459.752322654891,-1043.74928776337,-33.4645669291339),(-459.752322654891,-955.526759207532,-33.4645669291339),
            (-459.752322654891,-955.526759207532,-33.4645669291339),(-429.568595620799,-955.526759207532,-33.4645669291339),
            (-429.568595620799,-955.526759207532,-33.4645669291339),(-429.568595620799,-541.156680467441,-33.4645669291339),
            (-429.568595620799,-541.156680467441,-33.4645669291339),(-452.08568894252,-502.155930795449,-33.4645669291339),
            (-452.08568894252,-502.155930795449,-33.4645669291339),(-472.718502857348,-497.543950468796,-33.4645669291339),
            (-472.718502857348,-497.543950468796,-33.4645669291339),(-470.428285099883,-487.298105199012,-33.4645669291339),
            (-470.428285099883,-487.298105199012,-33.4645669291339),(-552.234955925253,-469.01214779189,-33.4645669291339),
            (-552.234955925253,-469.01214779189,-33.4645669291339),(-554.632527640079,-479.738267058615,-33.4645669291339),
            (-554.632527640079,-479.738267058615,-33.4645669291339),(-636.861541664111,-461.357904761721,-33.4645669291339),
            (-636.861541664111,-461.357904761721,-33.4645669291339),(-636.611049571652,-460.23726755931,-33.4645669291339),
            (-636.611049571652,-460.23726755931,-33.4645669291339),(-673.650082692933,-451.958062755809,-33.4645669291339),
            (-673.650082692933,-451.958062755809,-33.4645669291339),(-671.789280767058,-443.633313475032,-33.4645669291339),
            (-671.789280767058,-443.633313475032,-33.4645669291339),(-673.070011425831,-443.347036255624,-33.4645669291339),
            (-673.070011425831,-443.347036255624,-33.4645669291339),(-674.930813587839,-451.671786592796,-33.4645669291339),
            (-674.930813587839,-451.671786592796,-33.4645669291339),(-674.770722255356,-451.707571245252,-33.4645669291339),
            (-674.770722019171,-451.707570188619,-33.4645669291339),(-675.021214111626,-452.82820739102,-33.4645669291339),
            (-675.021214111626,-452.82820739102,-33.4645669291339),(-696.694017269241,-447.983761926675,-33.4645669291339),
            (-696.694017269241,-447.983761926675,-33.4645669291339),(-743.791936121745,-450.040101470455,-33.4645669291339),
            (-743.791936121745,-450.040101470455,-33.4645669291339),(-744.235571622658,-439.87917795698,-33.4645669291339),
            (-744.235571622658,-439.87917795698,-33.4645669291339),(-1022.51376720164,-452.02906635295,-33.4645669291339),
            (-1022.51376720164,-452.02906635295,-33.4645669291339),(-1022.07013170073,-462.18998986642,-33.4645669291339),
            (-1022.07013170073,-462.18998986642,-33.4645669291339),(-1042.55586719874,-463.084416393415,-33.4645669291339),
            (-1042.55586719874,-463.084416393415,-33.4645669291339),(-1042.94225057436,-454.234782146361,-33.4645669291339),
            (-1042.94225057436,-454.234782146361,-33.4645669291339),(-1050.48100274046,-454.563931174286,-33.4645669291339),
            (-1050.48100274046,-454.563931174286,-33.4645669291339),(-1050.09461936529,-463.413565420984,-33.4645669291339),
            (-1050.09461936529,-463.413565420984,-33.4645669291339),(-1050.25850015757,-463.420720610892,-33.4645669291339),
            (-1050.25850015757,-463.420720610892,-33.4645669291339),(-1056.25724120635,-326.026961886922,-33.4645669291339),
            (-1056.25724120635,-326.026961886922,-33.4645669291339),(-917.325538349484,-311.179446039463,-33.4645669291339),
            (-917.325538349484,-311.179446039463,-33.4645669291339),(-918.998988291782,-295.520580777552,-33.4645669291339),
            (-918.998988291782,-295.520580777552,-33.4645669291339),(-807.592686480215,-283.614681708868,-33.4645669291339),
            (-807.592686480215,-283.614681708868,-33.4645669291339),(-805.919236537907,-299.273546970783,-33.4645669291339),
            (-805.919236537907,-299.273546970783,-33.4645669291339),(-662.931559530072,-283.992572530034,-33.4645669291339)];

        var len = coords.Length;
        var list = new List<CurveRepresentation>();

        for (var i = 0; i < len / 2; i++)
        {
            var c0 = coords[i * 2];
            var c1 = coords[i * 2 + 1];

            list.Add(new CurveRepresentation(c0, c1));
        }

        Assert.DoesNotThrow(() => CurveOperation.MergeCurveEndRepresentations(list.ToArray(), 0.001));
    }
}
